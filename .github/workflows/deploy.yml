name: Deploy

on:
  push:
    branches: ["main"]

jobs:
  check_backend:
    name: Ignored Build Step Backend
    runs-on: ubuntu-latest
    outputs:
      run_frontend: ${{ steps.set_output.outputs.run_jobs }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 10

      - name: Check if new build is needed
        id: set_output
        run: bash ignore-build.bash @producktivity/server

  backend:
    name: Backend
    runs-on: ubuntu-latest
    needs: [check_backend]
    if: needs.ignore_build.outputs.run_frontend == 'true'

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
      - name: actions/checkout
        uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install

      - name: Write env
        run: node tools/scripts/writeEnv.js

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and push image
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/producktivity
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/producktivity

      - name: Deploy Database Migrations
        run: pnpm prisma migrate deploy

  check_frontend:
    name: Ignored Build Step Frontend
    runs-on: ubuntu-latest
    needs: [backend]
    outputs:
      run_backend: ${{ steps.set_output.outputs.run_jobs }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 10

      - name: Check if new build is needed
        id: set_output
        run: bash ignore-build.bash @producktivity/client

  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    needs: [check_frontend]
    if: needs.ignore_build.outputs.run_backend == 'true'

    permissions:
      contents: read
      deployments: write

    env:
      NEXT_PUBLIC_GRAPHQL_ENDPOINT: ${{ secrets.NEXT_PUBLIC_GRAPHQL_ENDPOINT }}

    steps:
      - name: actions/checkout
        uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install

      - name: Build and Export
        run: pnpm turbo run --filter="@producktivity/client" export

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          projectName: producktivity
          directory: apps/client/out

# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type RelyingParty {
  name: String!
  id: String!
}

type AuthenticatorChallenge {
  userId: String!
  challenge: String!
  relyingParty: RelyingParty!
}

type AuthorizationToken {
  token: String!
}

type AllowedCredentials {
  type: String!
  id: String!
}

type LoginChallenge {
  challenge: String!
  allowedCredentials: [AllowedCredentials!]!
}

type Authenticator {
  id: ID!
  createdAt: DateTime!
  fmt: String!
  publicKey: String!
  counter: Int!
  credentialId: String!
  user: User!
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Challenge {
  id: ID!
  challenge: String!
  createdAt: DateTime!
  user: User!
  userId: String!
}

type Task {
  id: ID!
  name: String!
  description: String!
  dueDate: DateTime!
  isCompleted: Boolean!
  tags: [String!]
  createdAt: DateTime!
  updatedAt: DateTime!
  User: User!
  userId: String!
}

type Event {
  id: ID!
  name: String!
  description: String
  dueDate: DateTime!
  tags: [String!]
  createdAt: DateTime!
  updatedAt: DateTime!
  User: User!
  userId: String!
}

type Habit {
  id: ID!
  name: String!
  tags: [String!]
  createdAt: DateTime!
  updatedAt: DateTime!
  User: User!
  userId: String!
}

type Notification {
  id: ID!
  name: String!
  description: String
  isVisited: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  User: User!
  userId: String!
}

type UserCount {
  authenticators: Int!
  tasks: Int!
  events: Int!
  habits: Int!
  notifications: Int!
}

type User {
  id: ID!
  username: String!
  registered: Boolean!
  authenticators: [Authenticator!]
  challenge: Challenge
  tasks: [Task!]
  events: [Event!]
  habits: [Habit!]
  notifications: [Notification!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: UserCount!
}

type Query {
  me: User!
}

type Mutation {
  requestRegister(username: String!): AuthenticatorChallenge!
  verifyRegister(id: String!, rawId: String!, type: String!, response: RegisterResponse!): AuthorizationToken!
  requestLogin(username: String!): LoginChallenge!
  verifyLogin(id: String!, response: LoginResponse!): AuthorizationToken!
}

input RegisterResponse {
  attestationObject: String!
  clientDataJSON: String!
}

input LoginResponse {
  authenticatorData: String!
  clientDataJSON: String!
  signature: String!
}
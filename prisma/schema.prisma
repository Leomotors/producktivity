// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output   = "../apps/server/src/@generated"
}

model User {
  id         String  @id @unique @default(cuid())
  username   String  @unique
  registered Boolean @default(false)

  authenticators Authenticator[]
  challenge      Challenge?

  tasks         Task[]
  events        Event[]
  habits        Habit[]
  notifications Notification[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Authenticator {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  fmt          String
  publicKey    String @map("public_key")
  counter      Int
  credentialId String @map("credential_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("authenticator")
}

model Challenge {
  id        String @id @unique @default(cuid())
  challenge String @unique

  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  @@map("challenge")
}

model Task {
  id          String   @id @unique @default(cuid())
  name        String
  description String
  dueDate     DateTime @map("due_date")
  isCompleted Boolean  @default(false) @map("is_completed")
  tags        String[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("task")
}

model Habit {
  id   String   @id @unique @default(cuid())
  name String
  tags String[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("habit")
}

model Event {
  id          String   @id @unique @default(cuid())
  name        String
  description String?
  dueDate     DateTime @map("due_date")
  tags        String[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("event")
}

model Notification {
  id          String  @id @unique @default(cuid())
  name        String
  description String?
  isVisited   Boolean @default(false) @map("is_visited")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("notification")
}
